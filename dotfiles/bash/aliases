# process, system, and kernel
alias tu='htop --sort-key PERCENT_CPU'
alias tm='htop --sort-key PERCENT_MEM'
alias rc='sudo nano /etc/rc.conf'            # edit rc.conf
alias vbox='sudo vbox_build_module'          # rebuild vbox module
alias kkms='sudo /sbin/mkinitcpio -p kernel26-kms'

# quick webfiles cd
cdw() {
 cd ~/public_html/$*
}

# utility
alias s='sudo'
alias h='history'
alias sz='. ~/.zshrc' # source zshrc file
alias sb='. ~/.bashrc' # source bachrc file
alias ea='gedit ~/.bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="gedit ~/.bin/dotfiles/bash/env"

# file aliases
alias ls='ls --color=auto -F'             # colourized list
alias ll='ls -lh'                         # list detailed with human-readable sizes
alias la='ls -a'                          # list all files
alias dir='ls -1'                         # windows-style list
alias f='find | grep'                     # quick search
alias c='clear'                           # clear screen
alias sps='ps aux | grep -v grep | grep'  # search process
alias grep='grep --color=auto'            # colourized grep
alias egrep='egrep --color=auto'          # colourized egrep

alias reboot='sudo reboot'
alias shutdown='sudo shutdown -h now'

# yaourt alias
alias yi='yaourt -S'
alias yu='yaourt -Syu --aur'
alias ys='yaourt -Ss'

# pacman aliases
alias pu='sudo pacman -Syu'            # sync and update
alias pi='sudo pacman -S'              # install pkg
alias po='sudo pacman -Rns'           # remove pkg and the deps it installed
alias pacs="pacman -Sl | cut -d' ' -f2 | grep " #
alias pac="pacsearch"                     # colorize pacman (pacs)
pacsearch ()
{
  echo -e "$(pacman -Ss $@ | sed \
  -e 's#core/.*#\\033[1;31m&\\033[0;37m#g' \
  -e 's#extra/.*#\\033[0;32m&\\033[0;37m#g' \
  -e 's#community/.*#\\033[1;35m&\\033[0;37m#g' \
  -e 's#^.*/.* [0-9].*#\\033[0;36m&\\033[0;37m#g' )"
}

# Ruby
alias r="rake"

# Rails alias's
alias sc='./script/console'
alias sg='./script/generate'
alias sp='./script/plugin'
alias ss='./script/server'
alias tl='tail -f log/*.log'
alias rmig='rake db:migrate'

alias nifty_generators='./script/plugin install git://github.com/ryanb/nifty-generators.git'
alias nifty_layout='./script/generate nifty_layout'
alias railsfck='./script/plugin install git://github.com/gramos/easy-fckeditor.git'
alias authlogic='./script/plugin install git://github.com/binarylogic/authlogic.git'

# git aliases
alias gi='git init'
alias ga='git add'
alias gaa='git add .' # git add --all
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
# git commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gd='git diff'
alias gdm='git diff master'
alias gl='git pull'
alias gnp="git-notpushed"
alias gp='git push'
function gpo() {
   git push origin $*
}
alias gst='git status'
alias gt='git status'
alias g='git status'
alias eg='gedit .git/config'
# git clone from GitHub
function gch() {
  git clone git://github.com/$USER/$1.git
}

# git setup a tracking branch from [remote] [branch_name]
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# git quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# git call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# ex - archive extractor
# usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       rar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# roll - archive wrapper
# usage: roll <foo.tar.gz> ./foo ./bar
roll ()
{
  FILE=$1
  case $FILE in
    *.tar.bz2) shift && tar cjf $FILE $* ;;
    *.tar.gz) shift && tar czf $FILE $* ;;
    *.tgz) shift && tar czf $FILE $* ;;
    *.zip) shift && zip $FILE $* ;;
    *.rar) shift && rar $FILE $* ;;
  esac
}

# mktar - tarball wrapper
# usage: mktar <filename | dirname>
function mktar() { tar czf "${1%%/}.tar.gz" "${1%%/}/"; }

# calc - simple calculator
# usage: calc <equation>
function calc() { echo "$*" | bc; }

# define - fetch word defnition from google
# usage: define <word>
define ()
{
  lynx -dump "http://www.google.com/search?hl=en&q=define%3A+${1}&btnG=Google+Search" | grep -m 5 -w "*"  | sed 's/;/ -/g' | cut -d- -f5 > /tmp/templookup.txt
  if [[ -s  /tmp/templookup.txt ]] ;then
    until ! read response
      do
      echo "${response}"
      done < /tmp/templookup.txt
    else
      echo "Sorry $USER, I can't find the term \"${1} \""
  fi
  rm -f /tmp/templookup.txt
}

# absbuild - quickly build and upgrade a pkg from ABS
# usage: absbuild <pkgname>
absbuild ()
{
  ABSPATH=`find /var/abs -type d -name $1`
  mkdir -p ~/.abs/$1
  cp -R $ABSPATH/* ~/.abs/$1
  cd ~/.abs/$1
  $EDITOR PKGBUILD
  makepkg -frs
  sudo pacman -U $1*x86_64.pkg.tar.gz
  cd -
}

# mkmine - recursively change ownership to $USER:$USER
# usage:  mkmine, or
#         mkmine <filename | dirname>
function mkmine() { sudo chown -R ${USER}:${USER} ${1:-.}; }

# sanitize - set file/directory owner and permissions to normal values (644/755)
# usage: sanitize <file>
sanitize()
{
  chmod -R u=rwX,go=rX "$@"
  chown -R ${USER}:users "$@"
}

# remindme - a simple reminder
# usage: remindme <time> <text>
# e.g.: remindme 10m "omg, the pizza"
remindme()
{
  sleep $1 && zenity --info --text "$2" &
}

# start, stop, restart, reload - simple daemon management
# usage: start <daemon-name>
start()
{
  for arg in $*; do
    sudo /etc/rc.d/$arg start
  done
}
stop()
{
  for arg in $*; do
    sudo /etc/rc.d/$arg stop
  done
}
restart()
{
  for arg in $*; do
    sudo /etc/rc.d/$arg restart
  done
}
reload()
{
  for arg in $*; do
    sudo /etc/rc.d/$arg reload
  done
}

nw()
{
  for arg in $*; do
    mkdir ~/public_html/$arg
    sudo sh -c "echo -e '127.0.0.1 $arg.dev\n127.0.0.1 www.$arg.dev\n' >> /etc/hosts"
    sudo sh -c "echo -e '<VirtualHost *:80>
    ServerAdmin bmartin@zyphmartin.com
    DocumentRoot \"/home/bmartin/public_html/$arg\"
    ServerName $arg.dev
    ServerAlias www.$arg.dev
    ErrorLog \"/var/log/httpd/www.$arg.dev_test-error_log\"
    CustomLog \"/var/log/httpd/www.$arg.dev_test-access_log\" common
</VirtualHost>\n' >> /etc/httpd/conf/extra/httpd-vhosts.conf"
  done
}

nr()
{
  for arg in $*; do
    sudo sh -c "echo -e '127.0.0.1 $arg.dev\n127.0.0.1 www.$arg.dev\n' >> /etc/hosts"
    sudo sh -c "echo -e '<VirtualHost *:80>
    ServerAdmin bmartin@zyphmartin.com
    DocumentRoot \"/home/bmartin/public_html/$arg/public\"
    ServerName $arg.dev
    ServerAlias www.$arg.dev
    ErrorLog \"/var/log/httpd/www.$arg.dev_test-error_log\"
    CustomLog \"/var/log/httpd/www.$arg.dev_test-access_log\" common
</VirtualHost>\n' >> /etc/httpd/conf/extra/httpd-vhosts.conf"
  done
}

nd()
{
  for arg in $*; do
    sudo sh -c "echo -e '127.0.0.1 $arg.dev\n127.0.0.1 www.$arg.dev\n' >> /etc/hosts"
    sudo sh -c "echo -e '<VirtualHost *:80>
    ServerAdmin bmartin@zyphmartin.com
    DocumentRoot \"/home/bmartin/public_html/$arg\"
    ServerName $arg.dev
    ServerAlias www.$arg.dev
    ErrorLog \"/var/log/httpd/$arg.dev_test-error_log\"
    CustomLog \"/var/log/httpd/$arg.dev_test-access_log\" common
    <LocationMatch ^/(.*)$>
        PythonPath \"[\'/home/bmartin/public_html/$arg\'] + sys.path\"
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE settings
        PythonOption django.root /$arg
        PythonDebug On
    </LocationMatch>
    <LocationMatch ^(/(media|css|images|scripts|errordocs))>
        SetHandler None
    </LocationMatch>
</VirtualHost>\n' >> /etc/httpd/conf/extra/httpd-vhosts.conf"
  done
}

